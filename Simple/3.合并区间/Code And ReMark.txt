class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x:x[0]) #使用列表中的子列表的第一个元素 也就是[1,4],[0,5]中的 1 和 0 作为排序比较条件
        merged = [intervals[0]] #设置merged为intervals[0]的第一个子列表
        for i in range(1,len(intervals)): #从第二个子列表开始循环
            if merged[-1][1] >= intervals[i][0]: #如果marged最后一个子列表中的第二个元素 大于或等于
                #intervals列表中的第i个子列表的第一个元素
                #也就是说检查第最后一个区间的第二个值和最新的区间的第一个值比较
                #如果marged区间的值大于或等于新列表的值说明，该区间有重叠
                merged[-1] = [merged[-1][0],max(merged[-1][1],intervals[i][1])] 
                #如果区间有重叠的话，我们把marged的最后一个区间的第一个元素，保留下来，只改变第二个元素
                #简单来说就是假如merged最后一个列表是[1,3] 而新的列表是[2,6] 我们就会把3 替换成6
            else:
                merged.append(intervals[i])#如果两个区间没有重叠那么就添加到merged结果中
        return merged